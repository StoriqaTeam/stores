version: '3'
services:
  stores:
    image: stores
    build:
      context: .
      dockerfile: Dockerfile.stores
    container_name: stores
    working_dir: /app
    command: ["sh", "-c", "/utils/wait_for_it.sh stores-pg:5432 ; /utils/wait_for_it.sh stores-es:9200 ; diesel migration run ; cargo run"]
    volumes:
      - ..:/app
      - stq_cargo_cache:/usr/local/cargo
    environment:
      - DATABASE_URL=postgresql://stores:stores@stores-pg/stores
      - "RUST_LOG=stores=trace"
    expose:
      - 8000
    stdin_open: true
    depends_on:
      - stores-pg
      - stores-es
    links:
      - stores-es
      - stores-pg

  zoo1:
    image: zookeeper
    restart: unless-stopped
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:4.0.0
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      # add the entry "127.0.0.1    kafka1" to your /etc/hosts file
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:4.0.0
    hostname: kafka-schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zoo1:2181
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka1

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.3
    hostname: kafka-schema-registry-ui
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      - kafka-schema-registry

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.0.0
    hostname: kafka-rest-proxy
    ports:
      - "8084:8084"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8084/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka1:9092
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    hostname: kafka-topics-ui
    ports:
      - "8002:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8084/"
      PROXY: "true"
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy

  kafka-connect:
    image: storiqateam/kafka-connect:master204
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.debezium=INFO,org.skynyrd=DEBUG"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /etc/kafka-connect/plugins
      ES_URL: "http://stores-es:9200"
    depends_on:
      - kafka-schema-registry
      - stores-es

  kafka-connect-init:
    image: storiqateam/stq-init:20180705
    environment:
      ES_HOST: "stores-es"
      DB_HOST: "stores-pg"
      KC_HOST: "docker_kafka-connect_1"
      SR_HOST: "docker_kafka-schema-registry_1"
    depends_on:
      - kafka-connect

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.3
    hostname: kafka-connect-ui
    ports:
      - "8003:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect

  stores-pg:
    image: debezium/postgres
    container_name: stores-pg
    volumes:
      - stq-stores-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=stores
      - POSTGRES_DB=stores
      - POSTGRES_PASSWORD=stores
    
  stores-es:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.1
    container_name: stores-es
    environment:
      - xpack.security.enabled=false
      - cluster.name=stores-es-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - stq-stores-elastic-data:/var/lib/elasticsearch/data
    

volumes:
  stq_cargo_cache:
  stq-stores-postgres-data:
  stq-stores-elastic-data:

networks:
  default:
    external:
      name: storiqa
